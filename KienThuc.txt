-----------------------useEffect--------------------------------
1. Hoạt động của useEffect

- function useEffect() sẽ được thực thi mỗi khi có bất kỳ state này thay đổi
- khi muốn chỉ state A thay đổi thì useEffect() mới thực thi thì sử dụng:
    useEffect(callback,[A])
- hoạt động giống componentDidMount và componentDidUpdate trong class component

2. Sử dụng khi nào?
+ thực hiện gọi API
+ Thêm, xóa các event listeners ('click', 'scroll',...)
+ Thao tác DOM trực tiếp
+ Gọi Web APIs (setTimeout, setInterval,...)

3. Lưu ý: 
- return của useEffect có thể trả về 1 function, lúc này function này
sẽ hoạt động như componentWillUnmout, Thường sử dụng để dọn dẹp rác
- khi state thay đổi, hàm trong return sẽ được thực thi trước sau đó mới đến
code trong useEffect thực thi

-----------------------useMemo--------------------------------

- Khi chưa sử dụng memo: trong file ExampleFunctional.js
function expensiveFunction() sẽ bị rerender mỗi khi nhấn nút Add, điều này ko tốt
cho perfomance
- Sử dụng useMemo:
    const number = useMemo(() => {
        return expensiveFunction(10)
    }, [])
thì hàm expensiveFunction(10) chỉ render 1 lần, sau đó mỗi khi click Add, nó ko bị
render lại

-----------------------useCallback--------------------------------

- Khi chưa sử dụng useCallback: 
trong file ChildComponent.js, ta có useEffect gán ngoại lệ [getData], khi nhấn button
'Get Users Data', function getData('users') được gọi làm getData() có thay đổi nên
function 'getData('comments')' trong useEffect được chạy lại, nên ta thấy có thêm 
request: comments gửi tới server. Điều này ko tốt về perfomance, ta cần dùng 
useCallback để tránh việc này.
